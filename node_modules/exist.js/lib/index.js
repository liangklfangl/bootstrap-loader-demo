'use strict';

function warn(msg) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof console !== 'undefined' && console.warn) {
      console.warn(msg);
    }
  }
}

var isExist = function isExist(variable) {
  return variable !== undefined && variable !== null;
};

var rxAccess = /[\[\]\.]+/;
var baseGet = function baseGet(obj, nestedProp, createMissing) {
  if (!isExist(obj)) return {};

  var props = Array.isArray(nestedProp) ? nestedProp : nestedProp.split(rxAccess);

  var prev = null;
  var curr = obj;
  var path = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = props[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var prop = _step.value;

      if (prop.length === 0) continue;

      prev = curr;
      curr = curr[prop];
      path.push(prop);
      if (!isExist(curr)) {
        if (createMissing) {
          prev[prop] = {};
          curr = prev[prop];
        } else {
          return {
            path: path
          };
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    value: curr,
    path: path
  };
};

var exist = function exist(obj, nestedProp) {
  warn('`exist()` is deprecated, please use `exist.detect()`.');
  return isExist(baseGet(obj, nestedProp).value);
};

exist.detect = function detect(obj, nestedProp) {
  var wrappedValue = baseGet(obj, nestedProp);
  if (!isExist(wrappedValue.value)) {
    return wrappedValue.path;
  }
  return true;
};

exist.get = function get(obj, nestedProp, defaultValue) {
  var value = baseGet(obj, nestedProp).value;
  return isExist(value) ? value : defaultValue;
};

exist.set = function set(obj, nestedProp, value, createMissing) {
  var props = Array.isArray(nestedProp) ? nestedProp : nestedProp.split(rxAccess);
  var ownee = props.pop();

  var owner = baseGet(obj, props, createMissing).value;
  if (isExist(owner)) {
    owner[ownee] = value;
    return true;
  } else {
    return false;
  }
};

var NOOP = function NOOP() {};
exist.invoke = function invoke(obj, nestedMethod) {
  var props = Array.isArray(nestedMethod) ? nestedMethod : nestedMethod.split(rxAccess);
  var ownee = props.pop();

  var owner = baseGet(obj, props).value;
  if (isExist(owner)) {
    var method = owner[ownee];
    if (typeof method === 'function') {
      return method.bind(owner);
    }
  }
  return NOOP;
};

module.exports = exist;